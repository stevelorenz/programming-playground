#
# @lc app=leetcode id=31 lang=python3
#
# [31] Next Permutation
#

# @lc code=start
class Solution:
    def swap(self, nums, ind1, ind2):
        """Swap two numbers"""
        temp = nums[ind1]
        nums[ind1] = nums[ind2]
        nums[ind2] = temp

    def reverse(self, nums, beg, end):
        while beg < end:
            self.swap(nums, beg, end)
            beg += 1
            end -= 1

    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # nums = [5, 4, 3, 2, 1]
        # output = [1, 2, 3, 4, 5]
        if len(nums) == 1:
            return

        if len(nums) == 2:
            return self.swap(nums, 0, 1)

        # Find the first number that is decrement-style
        dec = len(nums) - 2
        while dec >= 0 and nums[dec] >= nums[dec + 1]:
            dec -= 1
        # Reverse from dec + 1 to the end
        self.reverse(nums, dec + 1, len(nums) - 1)

        if dec == -1:
            # The smallest number is already generated by reversing
            return

        # Found the next increment number !!!
        next_num = dec + 1
        while next_num < len(nums) and nums[next_num] <= nums[dec]:
            next_num += 1
        self.swap(nums, next_num, dec)


# @lc code=end
