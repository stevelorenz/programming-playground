fn first_word(s: &String) -> usize {
    let bytes = s.as_bytes();
    // A reference is generated by the .iter() method.
    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return i;
        }
    }
    s.len()
}

fn first_word_slice(s: &str) -> &str {
    let bytes = s.as_bytes();
    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }
    &s[..]
}

fn main() {
    let mut s = String::from("Test test");
    let len = first_word(&s);
    println!("{}", len);

    // Immutable reference happens here.
    let word = first_word_slice(&s);
    println!("{}", word);

    s.clear();
    // println!("The first word is: {}", word);
}
